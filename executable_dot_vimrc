" This must be first, because it changes other options as a side effect.
filetype off
:set number
:set nu
set linespace=20
let g:ctrlp_extensions = ['buffertag']
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
set wildignore=*.swp,*.bak,*.pyc,*.class,*.jar,*.gif,*.png,*.jpg
call vundle#begin()
" " alternatively, pass a path where Vundle should install plugins
" "call vundle#begin('~/some/path/here')

source ~/.vim/fzf.vim

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'Raimondi/delimitMate'
Plugin 'scrooloose/nerdtree'
Plugin 'tmhedberg/SimpylFold'
Plugin 'Valloric/YouCompleteMe'
Plugin 'altercation/vim-colors-solarized'
Plugin 'tpope/vim-fugitive'
Plugin 'powerline/powerline'
Plugin 'kristijanhusak/vim-hybrid-material'
Plugin 'wincent/command-t'
Plugin 'taglist.vim'
Plugin 'chriskempson/base16-vim'
Plugin 'craigemery/vim-autotag'
Plugin 'morhetz/gruvbox'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-colorscheme-switcher'
Plugin 'rking/ag.vim'
Plugin 'Townk/vim-autoclose'
Plugin 'cocopon/iceberg.vim'
Plugin 'zackhsi/fzf-tags'
Plugin 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plugin 'junegunn/fzf.vim'
Plugin 'airblade/vim-rooter'

"
"
" TODO: this may not be in the correct place. It is intended to allow overriding <Leader>.
" source ~/.vimrc.before if it exists.
if filereadable(expand("~/.vimrc.before"))
  source ~/.vimrc.before
endif

""
"" https://stackoverflow.com/questions/13621845/vim-pumvisible-call-putting-in-random-text/13637074
let g:AutoClosePreserveDotReg = 0
"
"
" Keymaps
"
map <silent> <C-n> :NERDTreeToggle<CR>
let g:NERDTreeMapActivateNode = 'l'
nnoremap <C-g> <C-]>
nnoremap <C-o> <C-t>
nnoremap <C-T> <D-f>
nnoremap <C-f> z.
inoremap kj <Esc>
cnoremap kj <Esc>
map <C-J> :bprev<CR>
map <C-K> :bnext<CR>

inoremap " ""<left>
inoremap ' ''<left>





"
"
" ================ Tabs ====================
" noremap <C-[>  :tabprevious<CR>
" noremap <C-]> :tabnext<CR>


" B
" ================ General Config ====================
set backspace=indent,eol,start  "Allow backspace in insert mode
set history=1000                "Store lots of :cmdline history
set showcmd                     "Show incomplete cmds down the bottom
set showmode                    "Show current mode down the bottom
set gcr=a:blinkon0              "Disable cursor blink
set visualbell                  "No sounds
set autoread                    "Reload files changed outside vim
set encoding=utf-8

" This makes vim act like all other editors, buffers can
" exist in the background without being in a window.
" http://items.sjbach.com/319/configuring-vim-right
set hidden

"turn on syntax highlighting
syntax on

" ================= Search ================
set hlsearch
set incsearch

" Change leader to a comma because the backslash is too far away
" That means all \x commands turn into ,x
" The mapleader has to be set before vundle starts loading all
" the plugins.
let mapleader=","


" ================= Split  ================
set splitbelow
set splitright

map <C-H> <C-W><C-H>
nmap <C-L> <C-W><C-L>

" ================= CommandT ================
" let NERDTreeIgnore=['\__pycache__$']
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|\.git'

" ================= FZF ================
nnoremap <silent> <C-p> :FZF <cr>
nnoremap <silent> <C-e> :BTags<cr>
nnoremap <silent> <C-r> :Rg<CR>

" ================= RG ================
"
" ================= YouCompleteMe ================
nnoremap <silent> <C-g> :YcmCompleter GoToDefinition <cr>
let g:ycm_min_num_of_chars_for_completion = 1
let g:ycm_autoclose_preview_window_after_completion = 1
let g:ycm_autoclose_preview_window_after_insertion = 1
let g:ycm_key_list_stop_completion = ['<C-q>']


" =============== Vundle Initialization ===============
" This loads all the plugins specified in ~/.vim/vundles.vim
" Use Vundle plugin to manage all other plugins
if filereadable(expand("~/.vim/vundles.vim"))
  source ~/.vim/vundles.vim
endif

" ================ Turn Off Swap Files ==============

set noswapfile
set nobackup
set nowb

" ================ Persistent Undo ==================
" Keep undo history across sessions, by storing in file.
" Only works all the time.
if has('persistent_undo') && !isdirectory(expand('~').'/.vim/backups')
  silent !mkdir ~/.vim/backups > /dev/null 2>&1
  set undodir=~/.vim/backups
  set undofile
endif

" ================ Indentation ======================

set autoindent
set smartindent
set smarttab
set shiftwidth=4
set softtabstop=4
set tabstop=4
set expandtab

" Auto indent pasted text
nnoremap p p=`]<C-o>
nnoremap P P=`]<C-o>

" Display tabs and trailing spaces visually
set list listchars=tab:\ \ ,trail:Â·

set nowrap       "Don't wrap lines
set linebreak    "Wrap lines at convenient points

" ================ Folds ============================

set foldmethod=indent   "fold based on indent
set foldnestmax=3       "deepest fold is 3 levels
set nofoldenable        "dont fold by default

" ================ Python Mode ============================

if has("gui_running")
    set guifont=Inconsolata\ 20
endif

" ================ Completion =======================

set wildmode=list:longest
set wildmenu                "enable ctrl-n and ctrl-p to scroll thru matches
set wildignore+=*vim/backups*
set wildignore+=*sass-cache*
set wildignore+=*DS_Store*
set wildignore+=vendor/rails/**
set wildignore+=vendor/cache/**
set wildignore+=*.gem
set wildignore+=g/**
set wildignore+=tmp/**
set wildignore+=*.png,*.jpg,*.gif

"
" ================ Scrolling ========================

set scrolloff=8         "Start scrolling when we're 8 lines away from margins
set sidescrolloff=15
set sidescroll=1

" ================ Search ===========================

set incsearch       " Find the next match as we type the search
set hlsearch        " Highlight searches by default
set ignorecase      " Ignore case when searching...
set smartcase       " ...unless we type a capital

"
" statusline
"
set laststatus=2
let g:Powerline_symbols = "fancy"
set t_Co=256

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required


syntax enable
set background=dark
colorscheme slate
let g:solarized_termcolors=256

set clipboard+=unnamed  " use the clipboards of vim and win
set go+=a               " Visual selection automatically copied to the clipboard

set nocompatible
set nocp

" The Silver Searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
execute pathogen#infect()

set tags=tags

let g:easytags_cmd = '/usr/bin/ctags'
let g:gutentags_ctags_exclude = ["*.min.js", "*.min.css", "build", "vendor", ".git", "node_modules", "*.vim/bundle/*"]
